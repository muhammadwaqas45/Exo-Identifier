from flask import Flask, request, jsonify
from flask_cors import CORS
import joblib
import numpy as np
import pandas as pd

app = Flask(__name__)
CORS(app)

# Load trained model
model = joblib.load("exoplanet_model_90plus.pkl")
classes = {0: "False Positive", 1: "Candidate", 2: "Confirmed"}

# Required features
required_features = [
    'koi_period', 'koi_duration', 'koi_depth', 'koi_prad',
    'koi_teq', 'koi_insol', 'koi_model_snr', 'koi_steff',
    'koi_slogg', 'koi_srad'
]

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.json['features']

        # Check all features provided
        missing = [f for f in required_features if f not in data]
        if missing:
            return jsonify({"error": f"Missing features: {missing}"}), 400

        # Convert to DataFrame
        df = pd.DataFrame([{
            f: data[f] for f in required_features
        }])

        # Feature engineering
        df['radius_ratio'] = df['koi_prad'] / df['koi_srad']
        df['depth_duration'] = df['koi_depth'] * df['koi_duration']
        df['insolation_ratio'] = df['koi_insol'] / (df['koi_teq'] + 1e-5)
        df['period_depth'] = df['koi_period'] * df['koi_depth']

        # Apply log1p
        df[df.columns] = np.log1p(df[df.columns])

        # Prediction
        prediction = int(model.predict(df)[0])
        proba = model.predict_proba(df)[0]
        label = classes[prediction]
        confidence = round(np.max(proba) * 100, 2)

        # Visualization
        orbital_period = df['koi_period'].values[0]
        transit_duration = df['koi_duration'].values[0]
        transit_depth = df['koi_depth'].values[0]

        light_curve = [
            {"time": t, "flux": 1 - transit_depth * np.exp(-0.5*((t - transit_duration/2)/(transit_duration/5))**2)}
            for t in np.linspace(0, orbital_period / 10, 50)
        ]

        response = {
            "prediction": prediction,
            "label": label,
            "confidence": confidence,
            "justification": "Prediction generated by trained scikit-learn model.",
            "visualizations": {
                "orbitalPeriod": orbital_period,
                "transitDuration": transit_duration,
                "planetaryRadius": df['koi_prad'].values[0],
                "stellarRadius": df['koi_srad'].values[0],
                "planetType": "Gas Giant",
                "stellarType": "G-type main-sequence",
                "lightCurve": light_curve
            },
            "modelName": "Exoplanet Model 90+",
            "trainAccuracy": 99,
            "testAccuracy": 95
        }

        return jsonify(response)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    import os
    port = int(os.environ.get("PORT", 5000))  # Railway sets PORT automatically
    app.run(host="0.0.0.0", port=port)

